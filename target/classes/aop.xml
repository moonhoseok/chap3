<?xml version="1.0" encoding="UTF-8"?>
<!-- /chap3/src/main/java/aop.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop.xsd">
 	<bean id="write" class="spring.WriteImpl">
 		<constructor-arg><ref bean="articleDao" /></constructor-arg>
 	</bean>
 	<bean id="articleDao" class="spring.MariadbArticleDao" />
 	<bean id="logging" class="spring.LoggingAspect"/>
 <!-- 
 	aop 관련 용어
 		 
 	pointcut : 핵심기능을 가진 메서드 설정. 핵심메서드
 	expression : 핵심메서드 설정
 	execution(public * spring.*Impl.*(..)) :
 			spring 패키지의 클래스중 클래스의 이름이 ...Impl인 클래스의 모든 public 메서드
 		public : 접근제한자가 public인 메서드
 		*  	   : 리턴타입과 상관없음
 		spring. *Impl : spring 패키지의 클래스중 클래스의 이름이 ...Impl인 클래스
 		*(..) : * => 모든메서드
 			  : (..) => 매개변수와 상관없이
 	- aspect : AOP 클래스 설정
 		ref="logging" : 객체중 logging이름을 가진 객체를 AOP클래스로 설정
 						spring.LoggingAspect
 	- advice : AOP이 실행되는 시점 설정
 		around : 핵심메서드 실행 전,후
 		before : 핵심메서드 실행 전
 		after  : 핵심메서드 실행 후 
 		afterReturning : 핵심메서드 정상 실행 후 
 		afterThrowing  : 핵심메서드 오류 실행 후 
  -->
 	<aop:config><!-- aop 설정 -->
 		<aop:pointcut expression="execution(public * spring.*Impl.*(..))"
 		id="servicepointcut"/>
 			<!-- aop 클래스 지정 -->
 		<aop:aspect id="loggingAspect" ref="logging">
 			<aop:around method="logging" pointcut-ref="servicepointcut" />
 		</aop:aspect>
 	</aop:config>	 
</beans>